import type { Metadata } from 'next';
import { Inter } from 'next/font/google';
import '@/styles/globals.css';
import Navbar from '@/components/Navbar';
import { ThemeProvider } from '@/components/theme-provider';
import { cookies } from 'next/headers';
import { createServerClient } from '@supabase/ssr';
import { Toaster } from '@/components/ui/toaster';
import { Notification } from '@/types/notification';
import { NextIntlClientProvider } from 'next-intl';

const inter = Inter({ subsets: ['latin'] });

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

async function getNotifications(
  userId?: string
): Promise<Notification[] | undefined> {
  try {
    let response: Response;

    if (userId) {
      response = await fetch(
        `${process.env.NEXT_PUBLIC_API_URL}/v1/notifications?userId=${userId}`,
        {
          method: 'GET',
        }
      );
    } else {
      throw new Error('No userId provided');
    }

    if (!response.ok) {
      throw new Error(
        'Error fetching savings: ' + response.statusText + ' ' + response.json()
      );
    }

    const notifications: Notification[] = await response.json();

    return notifications;
  } catch (error) {
    console.error(error);
    return;
  }
}

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const cookieStore = cookies();

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value;
        },
      },
    }
  );

  const {
    data: { session },
  } = await supabase.auth.getSession();

  const notifications: Notification[] | undefined = await getNotifications(
    session?.user.id
  );

  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <NextIntlClientProvider>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
            themes={['light', 'dark']}
          >
            <Toaster />
            {session && <Navbar notifications={notifications} />}
            <main className="container mx-auto pt-4">{children}</main>
          </ThemeProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
